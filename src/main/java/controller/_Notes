This package contains all of the controllers.



//NOTES, MISTAKES, & THINGS I FORGOT//
  Question [] how do I properly utilize multiple fx controllers
    For example when I have multiple elements in a fx scene that are reusable for other scenes or can simply be partitioned to make more readable and manageable code how do i get them to communicate together?
    When i tried this using tabs (the controller now called MainWindow) I could not get the 'child' controller to properly function because it could not communicate with the parent scene: for example a button that is meant to close this tab that is in this tab cannot contact the parent scene to close the tab because it cannot access the fxml.
    Note I am using fxml include functionality to implement this.
    Untried solution: can i extend the parent controller to gain access to the fx:ids still the controller is not referenced in the fxml so i dont see how it would communicate.

  I organized Appointments Controller into sections moving from the autogenerated layout of the fx create field function, This was not the way to go it is much faster to let the create feature layout your class then organize down the fxml in line with it.
  @ MainWindow.openAppointments  //TODO [c] tabPain is not working (NullPointerException) possibly due to implementing "<Include>" into my fxml. If I wish to continue the intended project structure I may have combined all fxml & controllers into 1 controller & 1 fxml. Really do not like this and am frustrated that FXML does not appear to have an intuitive way to reverence fx:id values from parent fxml object when using include. If this was the case can i could open tabs, windows, or any other fxml object using purpose built fxml files to set up more versatile scenes.
                           // - Solution - sure enough after hours of research and trial the only solution appears to be removing the <include> fxml functionality and creating 1 big fxml file.I wish that I could find a way to have the included fxml inherit the parent fxml fx:id.
                           //Missing Skill This will now require me to create a unified fxml & controller class to keep the original intention and avoid avoid a sapir-whorf like tool constraint.


//        //TODO [c] create home menu fxml
//        //TODO [c] create load home menu on validation logic //Committing
//        if (loginValidated) {
//
//
//            //Home.loadHomeFXML(stage, loginButton, getClass());
//
//            //TODO [Extra] was attempting to make a a clean method for loading scenes shown below, did not work properly but may revit the idea.
//            //Home.loadHomeFXML(loginButton, getClass());
//
//            CChoulesDevTools.println("Loading mainWindow.fxml");
//
//            //Note: this is incorrect I keep doing this bellow:
//            //FXMLLoader loader = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/controller/HomeMenu.fxml")));
//            FXMLLoader loader = new FXMLLoader(getClass().getResource("/windows/mainWindow.fxml"));
//
//            Parent root = loader.load();
//
//            //TODO [Extra] Complete dark mode pass through from this scene to home
////            controller.trash.subViewController.Home mp = loader.getController();
////        //passing the css settings
////        mp.passCss(cssPath, darkModeOn);
//
//            stage = (Stage) loginButton.getScene().getWindow();
//            Scene scene = new Scene(root);
//
//            CChoulesDevTools.applyDevStyleToScene(scene);
//
//            stage.setScene(scene);
//            stage.show();
//        }

        //showIncorrectPasswordPopup();

                    // TODO [c] schedulingApplicationPopup is not firing -The version of java alerts was out of date in the example I was looking at.
                    // TODO [c] create an class to store popups settings for this application -SchedulingApplicationPrompt
                    //showIncorrectPasswordPopup();

                            //Missing Skill,
                            //Skill Found: DAO Use Case:
                            // Need to create a Data Access Object(DAO).
                            //DAOs are abstractions used to access persistent mechanisms
                            //such as Data Bases. Focused often on CRUD (Create, Read,
                            // Update, Delete) operations on data entities.

                            // TODO [c] create a dataAccessObject package

                            // TODO [c] create a DAO to access user date inside the SQL DB
                            //Validates user input


#### the following is a copy of the original Home Class and its notes

    package controller.trash.subViewController;

    import applicationTools.CChoulesDevTools;
    import javafx.event.ActionEvent;
    import javafx.fxml.FXMLLoader;
    import javafx.scene.Parent;
    import javafx.scene.Scene;
    import javafx.scene.control.Button;
    import javafx.stage.Stage;

    import java.io.IOException;
    //To be deleted
    public class Home {

        //TODO [ip] review rubric
        // Missing a focus on the following competencies:
        // Lambda expressions
        // Collections w/ streams & filters
        // Localization API & Date/Time API

        // TODO [c] learn how to sanitize and validate user inputs for sql.
        // answer - https://www.codecademy.com/learn/seasp-defending-node-applications-from-sql-injection-xss-csrf-attacks/modules/seasp-preventing-sql-injection-attacks/cheatsheet - This shows our parameter solution is good enough for the scope of this project , but just in case we will sanitize user input for SQL queries as well.
        /*
         TODO [c] Scaffold all scenes/controllers here with fxml layout done.
          --create a test scaffold then prepare actions & structure below
          --structure
                login -c-> mainWindow { tabs:
                -->ViewAppointments {add brings up split pane}
                -->ViewCustomers (Edit,Delete,Add New) -->Save
                -->ViewReports {subTabs:
                    -->Contact Schedule
                    -->Appointment Totals
                    -->ViewCustomers by Country
                -->Exit

                -optional-> Logout
         TODO [c] had difficulty bringing multiple controllers to interact
          with mainWindow. Test to see including all needed code inside
          1 controller. This was mainly around the tabs pain interaction.
          FOUND: Unfortunately using the "include fxml" feature does allow a clear way for the controller to communicat with the parent fxml elements & controller. We will have to revert to a unified FXML & Controller to utilize tabs in fxml.
          SOLUTION: Setting up a new Window controller that will contain all controllers once they are tested and functioning.

         TODO [Extra] logout button.
         TODO [l] exit button -remember to close connection.
         TODO [l] Clean up LoginWindow class.
         TODO [c] Complete appointment controller.
        */

        public Button homeAppointmentsButton;
        public Button homeCustomersButton;
        public Button homeReportsButton;
        public Button homeLogOutButton;
        public Button homeExitButton;

        public void homeAppointmentClick(ActionEvent actionEvent) {
        }

        public void homeCustomerClick(ActionEvent actionEvent) {
        }

        public void homeReportsClick(ActionEvent actionEvent) {
        }

        public void logOutClick(ActionEvent actionEvent) {
        }

        public void homeExitClick(ActionEvent actionEvent) {
        }

        //TODO [c] Create a method to set open this controller's scene.
        public static void loadHomeFXML(Stage stage, Button buttonBringingUsHome, Class passGetClassMethod) throws IOException {

            Home.testMethod();
            //Home.loadHomeFXML(loginButton, getClass());

            CChoulesDevTools.println("Loading HomeMenu.fxml");

            //Note: this is incorrect I keep doing this bellow:
            //FXMLLoader loader = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/controller/HomeMenu.fxml")));
            FXMLLoader loader = new FXMLLoader(passGetClassMethod.getResource("/views/HomeMenu.fxml"));

            Parent root = loader.load();

            Home mp = loader.getController();

    //        //passing the css settings
    //        mp.passCss(cssPath, darkModeOn);

            stage = (Stage) buttonBringingUsHome.getScene().getWindow();
            Scene scene = new Scene(root);

            CChoulesDevTools.applyDevStyleToScene(scene);

            stage.setScene(scene);
            stage.show();
        }

        //TODO [l] create a method to load subview or load FAILED DELETE THIS entire class and organize the notes.
        public static void loadHomeFxmlWithSubView(Stage stage, Button buttonBringingUsHome, Class passGetClassMethod) throws IOException {

            Home.testMethod();
            //Home.loadHomeFXML(loginButton, getClass());

            CChoulesDevTools.println("Loading HomeMenu.fxml");

            //Note: this is incorrect I keep doing this bellow:
            //FXMLLoader loader = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/controller/HomeMenu.fxml")));
            FXMLLoader loader = new FXMLLoader(passGetClassMethod.getResource("/views/HomeMenu.fxml"));

            Parent root = loader.load();

            Home mp = loader.getController();

    //        //passing the css settings
    //        mp.passCss(cssPath, darkModeOn);

            stage = (Stage) buttonBringingUsHome.getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        }

        public static void testMethod(){
            CChoulesDevTools.println("This is a test indicating a successful method call.");
        }

    }
