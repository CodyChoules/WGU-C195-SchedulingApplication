This package contains all of the controllers.



//NOTES, MISTAKES, & THINGS I FORGOT//
  Question [] how do I properly utilize multiple fx controllers
    For example when I have multiple elements in a fx scene that are reusable for other scenes or can simply be partitioned to make more readable and manageable code how do i get them to communicate together?
    When i tried this using tabs (the controller now called MainWindow) I could not get the 'child' controller to properly function because it could not communicate with the parent scene: for example a button that is meant to close this tab that is in this tab cannot contact the parent scene to close the tab because it cannot access the fxml.
    Note I am using fxml include functionality to implement this.
    Untried solution: can i extend the parent controller to gain access to the fx:ids still the controller is not referenced in the fxml so i dont see how it would communicate.

  I organized Appointments Controller into sections moving from the autogenerated layout of the fx create field function, This was not the way to go it is much faster to let the create feature layout your class then organize down the fxml in line with it.
  @ MainWindow.openAppointments  //TODO [c] tabPain is not working (NullPointerException) possibly due to implementing "<Include>" into my fxml. If I wish to continue the intended project structure I may have combined all fxml & controllers into 1 controller & 1 fxml. Really do not like this and am frustrated that FXML does not appear to have an intuitive way to reverence fx:id values from parent fxml object when using include. If this was the case can i could open tabs, windows, or any other fxml object using purpose built fxml files to set up more versatile scenes.
                           // - Solution - sure enough after hours of research and trial the only solution appears to be removing the <include> fxml functionality and creating 1 big fxml file.I wish that I could find a way to have the included fxml inherit the parent fxml fx:id.
                           //Missing Skill This will now require me to create a unified fxml & controller class to keep the original intention and avoid avoid a sapir-whorf like tool constraint.
